To remember 

// Если я задаю размер какого-то элемента - нужно указавать не фиксированный размер, а максимальный max-width
// Каджый раз, когда задаю размер блока - думать, должен ли он быть жестко фиксированным или нет

// intro лучше прописывать в section, чтобы не создавать еще один div

// Если у header указана позиция fixed, то следующий блок будет начинаться с самого верха страницы, поэтому,
при верстке следующего блока я иду в тот блок, который начинается с самого верха и прописываю padding-top

// margin - это внешний блок вокруг элемента, который его сдвигает

// Лучше прописывать комменатрии с названиями блоков, указавать начало и конец, чтобы было удобнее ориентироваться 
в коде

// Самостоятельным элементам на странице не нужно прописывать принадлежность к какому-либо элементу. 
Самостоятельный элемент - каждый новый блок

// fildset Нужен для группировки input

// legend указывает название fildset 

// У button обязательно должен быть type c типом submit

// Форма обязательно должна быть flex, нужно создать родительский элемент

// input нельзя прописывать псевдоклассы

// intro лучше прописывать минимальную высоту, не задавать жестко размер

// У input должен быть атрибут name, по этому атрибуту сервер понимает, что именно было отправлено 

// Когда создаем новую секцию - она по умолчанию занимает всю ширину страницы и правильно уже внутри
секции указывать максимальную ширину контента в ней

// Селекторы - название элемента, потом * означает, что идет обращение к каждому элементу внутри этого тега

// fr - фракции нунжны для адаптимвной верстки

// F minmax(min__value, max__value) в grid

// grid-auto-flow: row; --> значение по умолчниаю, но можно прописать column, тогда контент будет выстроен в колонку

// Абсолютно спозиционированный элемент выпадает из общего потока
документа 

// Св-ва ниже задаются для родительского элемента - ?

// grid-template-column - количество столбцов, либо карточек - 
элементов 

// grid-column-gap - отступ между колонками

// grid-column: span 1; - Этот параметр говорит о том, что контент в колонке
занимает строго одну колонку и не может ее покинуть

// .img {
     /* Параметр, чтобы изображение никогда не выходило из контейнера, в котором
    оно находиться */
    max-width: 100%;
    /* Параметр, чтобы изображение всегда сжималось пропорциаонально */
    height: auto;
} 

Картинкам обязательно прописывать такие параметры, чтобы 
картинка не занимала больше, чем контейнер, в котором она
находиться и чтобы высота выстраивалась автоматически

// У картинок по умолчванию есть небольшой отступ снизу, чтобы
его убрать нужно задать картинке параметр display: block;

// Чтобы сделать анимацию стрелки можно у изначальной стрелки задать положение
95%, после в hover прописать ее новое положение

// Чтобы движение стрелки происходило плавно, нужно прописать в самом объекте
в стилях параметр transition: .2s all;

// Общие классы лучше задавать в начале документа

// overflow: auto; Если контент внутри блока больше, чем размер
// Самого блока, то в это случае на странице появиться прокрутка

// Если у блока есть картинка и подпись к этой картинке лучше 
использовать тег figure

// figcaption - Семантический тег для текста внутри картинки

// object-fit: cover - Поведение картинки внутри блока, как она
заполняется и масшабируется

// overflow - поведение контента в блоке, если он его превышает

// transition указывается для родительского элемента

// Первая строчка делит экран на 6 равных частей
// Вторая говорит элементу с некоторым классом, что она будет 
// занимать 3 части из 6
// grid-template-columns: repeat(6, 1fr);
// grid-column: span 3; 

// transform --> Перемещение либо мастабирование элемента на странице

// Тег section подразумевает наличие заголовка

// Если у следующего логического блока на странице нет заголовка --> 
// Использую просто div

// grid-gap: 0 100px !
// grid-column-gap: 100px !



